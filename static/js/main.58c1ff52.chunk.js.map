{"version":3,"sources":["Components/row/Row.js","Components/BottomBar/BottomBar.js","App.js","serviceWorker.js","index.js"],"names":["Row","card","React","createElement","Card","raised","key","id","className","src","concat","image","alt","name","onClick","handleClick","BottomBar","props","BottomNavigation","children","App","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","this","call","levels","cards","threshold","shuffleArray","array","shuffled","slice","i","length","j","Math","floor","random","_ref","shuffle","c","state","_ref2","setState","_toConsumableArray","findId","clicked","includes","returnFirstNull","indexOf","insertId","index","map","elem","emptyClicked","Array","fill","resetScoreZero","score","incrementBothScores","topScore","incrementScore","getNewCards","num","newCards","_loop","randomIndex","characters","usedCards","push","prevState","event","target","alert","currentLevel","newScore","newTopScore","newLevel","console","log","fetchedNewCards","_createClass","value","_this2","totalCards","cardsPerRow","min","ceil","sqrt","document","documentElement","style","setProperty","numberOfRows","Fragment","AppBar","position","color","from","_","rowIndex","Object","assign","BottomNav","background","marginTop","paddingTop","borderTop","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.58c1ff52.chunk.js","sourcesContent":["import React from \"react\";\nimport Card from '@material-ui/core/Card';\nimport \"./row.css\";\n\n\nconst Row = card => (\n    <Card\n        raised={true}\n        key={card.id}\n        className=\"card\"\n    >\n        <img\n            src={`imgs/${card.image}`}\n            alt={card.name}\n            className=\"card-image\"\n            onClick={card.handleClick}\n            id={card.id}\n        />\n    </Card>\n)\n\nexport default Row;","import React from \"react\";\nimport BottomNavigation from \"@material-ui/core/BottomNavigation\";\nimport \"./BottomBar.css\"\n\nconst BottomBar = props => (\n    <BottomNavigation {...props}>\n        {props.children}\n    </BottomNavigation>\n)\n\nexport default BottomBar;","import React, { Component } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport \"./App.css\";\nimport characters from \"./Characters.json\";\nimport Row from \"./Components/row/Row.js\";\nimport BottomNav from \"./Components/BottomBar\";\n\nclass App extends Component {\n  // Define levels, card counts, and the score thresholds\n  levels = [\n    { cards: 4, threshold: 4 },\n    { cards: 4, threshold: 8 },\n    { cards: 9, threshold: 17 },\n    { cards: 9, threshold: 26 },\n    { cards: 9, threshold: 35 },\n    { cards: 16, threshold: 51 },\n    { cards: 16, threshold: 67 },\n    { cards: 16, threshold: 83 },\n    { cards: 16, threshold: 99 },\n    { cards: 16, threshold: 115 }\n];\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: this.shuffleArray(characters).slice(0, this.levels[0].cards),\n      score: 0,\n      topScore: 0,\n      clicked: Array(this.levels[0].cards).fill(false),\n      currentLevel: 0,\n      usedCards: []\n    };\n  }\n\n  //Fisher-Yates Shuffle on characters\n  shuffleArray = (array) => {\n    let shuffled = array.slice();  // make a copy\n    for (let i = shuffled.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n    }\n    return shuffled;\n  }\n  //Fisher-Yates Shuffle on cards, update state\n  shuffle = () => {\n    let c = this.state.cards;\n    for (let i = c.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [c[i], c[j]] = [c[j], c[i]];\n    }\n    this.setState({\n      cards: [...c]\n    })\n  }\n  // Check the clicked array for an id\n  findId = id => {\n    return this.state.clicked.includes(id);\n  }\n  // Return the index of where the first null(empty space in clicked array) is found\n  returnFirstNull = () => {\n    return this.state.clicked.indexOf(false);\n  }\n  // Insert id into clicked array\n  insertId = (id, index) => {\n    this.setState({\n      clicked: this.state.clicked.map((elem, i) => {\n      return i === index ? id : elem;\n    })\n    });\n  }\n  // Clear clicked array\n  emptyClicked = () => {\n    this.setState({\n      clicked: Array(16).fill(false)\n    });\n  }\n  // Reset the score\n  resetScoreZero = () => {\n    this.setState({\n      score: 0\n    });\n  }\n  // Increment both the scores (setState is async...)\n  incrementBothScores = () => {\n    this.setState({\n      score: this.state.score + 1,\n      topScore: this.state.topScore + 1\n    });\n  }\n  // increment just the score\n  incrementScore = () => {\n    this.setState({\n      score: this.state.score + 1\n    });\n  }\n\n  // Get new cards each level\n  getNewCards = (num) => {\n    let newCards = [];\n    // Fetch unique cards not used before in this game session\n    while (newCards.length < num) {\n        const randomIndex = Math.floor(Math.random() * characters.length);\n        if (!this.state.usedCards.includes(randomIndex) && !newCards.includes(characters[randomIndex])) {\n            newCards.push(characters[randomIndex]);\n            this.setState(prevState => ({\n                usedCards: [...prevState.usedCards, randomIndex]\n            }));\n        }\n    }\n    return newCards;\n  }\n\n\n// Main game logic here\nhandleClick = event => {\n  const id = event.target.id;\n\n  if (this.findId(id)) {\n      // It has already been clicked!\n      alert('Sorry, You already clicked that one.');\n      // Reset the counters...\n      this.emptyClicked();\n      this.resetScoreZero();\n      // Reset the game to the start\n      this.setState({\n          cards: this.shuffleArray(characters).slice(0, this.levels[0].cards),\n          clicked: Array(this.levels[0].cards).fill(false),\n          currentLevel: 0,\n          usedCards: []\n      });\n      // No need to shuffle here since we're using shuffleArray above\n  } else {\n      // Not already clicked...\n      // Put the id in the clicked array\n      this.insertId(id, this.returnFirstNull());\n      \n      let newScore = this.state.score + 1;\n      let newTopScore = this.state.topScore;\n      \n      if (newScore > this.state.topScore) {\n          newTopScore = newScore;\n      }\n      \n      this.setState({\n          score: newScore,\n          topScore: newTopScore\n      });\n      \n      this.shuffle();  // Shuffle the cards here after updating the score.\n      \n      // Check if all cards have been clicked for the current level\n      if (newScore >= this.levels[this.state.currentLevel].threshold) {\n        let newLevel = this.state.currentLevel + 1;\n\n        // Logging the current state of the usedCards array\n        console.log(\"Used Cards:\", this.state.usedCards);\n    \n        // Logging the new level\n        console.log(\"New Level:\", newLevel);\n    \n        let fetchedNewCards = this.getNewCards(this.levels[newLevel].cards);\n        console.log(\"New Cards:\", fetchedNewCards);\n        \n        if (newLevel >= this.levels.length) {\n            // If user completes the last level\n            alert(\"Congratulations! You have beat the game.\");\n            this.setState({\n                score: 0,\n                currentLevel: 0,\n                clicked: Array(this.levels[0].cards).fill(false),\n                cards: this.shuffleArray(characters).slice(0, this.levels[0].cards),\n                usedCards: []\n            });\n            return;\n        }\n      \n        // If all cards have been clicked, proceed to the next level\n        this.setState({\n          cards: this.shuffleArray(fetchedNewCards).slice(0, this.levels[newLevel].cards),\n          clicked: Array(this.levels[newLevel].cards).fill(false),\n          currentLevel: newLevel\n        });\n      }\n    }\n  }\n\n  render() {\n    const totalCards = this.state.cards.length;\n    const cardsPerRow = Math.min(4, Math.ceil(Math.sqrt(totalCards)));\n    document.documentElement.style.setProperty('--cards-per-row', cardsPerRow);\n    const numberOfRows = Math.ceil(totalCards / cardsPerRow);\n\n    return (\n      <>\n        <AppBar position=\"fixed\" color=\"secondary\">\n          <nav className=\"navbar navbar-default myNavColor\">\n            <div className=\"container-fluid\">\n              <div className=\"navbar-header\">\n                {/* <Typography variant=\"h4\"  className=\"navbar-brand whiteText impactFont\">\n                  Spider-Click\n                </Typography> */}\n                <h2 className=\"whiteText impactFont\">Memory Mix-Up</h2>\n              </div>\n\n              <ul className=\"nav navbar-nav whiteText\">\n                <li>\n                  <h4>Current Score: {this.state.score} || High Score: {this.state.topScore}</h4>\n                </li>\n              </ul>\n            </div>\n          </nav>\n        </AppBar>\n        <div id=\"main-content\" className=\"container\">\n        {Array.from({ length: numberOfRows }).map((_, rowIndex) => (\n          <div className=\"row\" key={rowIndex}>\n            {this.state.cards\n              .slice(rowIndex * cardsPerRow, (rowIndex + 1) * cardsPerRow)\n              .map((card, index) => (\n                <Row\n                  {...card}\n                  handleClick={this.handleClick}\n                  key={index}\n                />\n              ))}\n          </div>\n        ))}\n        </div>\n        <BottomNav style={{ background: \"#FFFFFF\", marginTop: \"17.5px\", paddingTop: \"15px\", borderTop: \"2.5px solid slategray\" }}>\n          \n        </BottomNav>\n\n      </>\n    );\n  }\n\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}